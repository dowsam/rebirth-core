/**
* Copyright (c) 2005-2011 www.china-cti.com
* Id: StatementWarpper.java 2011-5-16 11:48:54 l.xue.nong$$
*/
package cn.com.rebirth.core.logsql;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.lang.reflect.Constructor;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import cn.com.rebirth.commons.settings.Settings;
import cn.com.rebirth.commons.utils.DateUtils;
import cn.com.rebirth.commons.utils.NonceUtils;
import cn.com.rebirth.core.logsql.LogSqlEntity.SqlTypeEnum;

import com.google.common.collect.Lists;

/**
 * The Class StatementWarpper.
 *
 * @author l.xue.nong
 */
public class StatementWarpper implements Statement {
	/** The logger. */
	protected Logger logger = LoggerFactory.getLogger(getClass());

	/** The real statement. */
	protected Statement realStatement;

	/** The current batch. */
	protected List<SqlParamEntity> currentBatch = Lists.newArrayList();

	/** The connection warpper. */
	protected ConnectionWarpper connectionWarpper;

	/** The settings. */
	protected Settings settings;

	/**
	 * Gets the real statement.
	 * 
	 * @return the real statement
	 */
	public Statement getRealStatement() {
		return realStatement;
	}

	/**
	 * Instantiates a new statement warpper.
	 * 
	 * @param connectionWarpper
	 *            the connection warpper
	 * @param realStatement
	 *            the real statement
	 */
	public StatementWarpper(ConnectionWarpper connectionWarpper, Statement realStatement) {
		if (realStatement == null) {
			throw new IllegalArgumentException("Must pass in a non null real Statement");
		}
		if (connectionWarpper == null) {
			throw new IllegalArgumentException("Must pass in a non null ConnectionSpy");
		}
		this.realStatement = realStatement;
		this.connectionWarpper = connectionWarpper;
		this.settings = connectionWarpper.getSettings();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#addBatch(java.lang.String)
	 */
	@Override
	public void addBatch(String sql) throws SQLException {
		currentBatch.add(new SqlParamEntity(sql, null) {
			private static final long serialVersionUID = 4976604024707054907L;
		});
		realStatement.addBatch(sql);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#cancel()
	 */
	@Override
	public void cancel() throws SQLException {
		realStatement.cancel();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#clearBatch()
	 */
	@Override
	public void clearBatch() throws SQLException {
		realStatement.clearBatch();
		currentBatch.clear();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#clearWarnings()
	 */
	@Override
	public void clearWarnings() throws SQLException {
		realStatement.clearWarnings();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#close()
	 */
	@Override
	public void close() throws SQLException {
		realStatement.close();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#execute(java.lang.String)
	 */
	@Override
	public boolean execute(String sql) throws SQLException {
		String methodName = "execute(" + sql + ")";
		long tstart = System.currentTimeMillis();
		boolean result = realStatement.execute(sql);
		long tsEnd = System.currentTimeMillis();
		action(methodName, sql, sql, (tsEnd - tstart), null);
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#execute(java.lang.String, int)
	 */
	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		String methodName = "execute(" + sql + "," + autoGeneratedKeys + ")";
		long tstart = System.currentTimeMillis();
		boolean result = realStatement.execute(sql, autoGeneratedKeys);
		long tsEnd = System.currentTimeMillis();
		action(methodName, sql, sql, (tsEnd - tstart), null);
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#execute(java.lang.String, int[])
	 */
	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		String methodName = "execute(" + sql + "," + columnIndexes + ")";
		long tstart = System.currentTimeMillis();
		boolean result = realStatement.execute(sql, columnIndexes);
		long tsEnd = System.currentTimeMillis();
		action(methodName, sql, sql, (tsEnd - tstart), null);
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#execute(java.lang.String, java.lang.String[])
	 */
	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		String methodName = "execute(" + sql + "," + columnNames + ")";
		long tstart = System.currentTimeMillis();
		boolean result = realStatement.execute(sql, columnNames);
		long tsEnd = System.currentTimeMillis();
		action(methodName, sql, sql, (tsEnd - tstart), null);
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#executeBatch()
	 */
	@Override
	public int[] executeBatch() throws SQLException {
		int j = currentBatch.size();
		StringBuffer batchReport = new StringBuffer("batching " + j + " statements:");
		int fieldSize = ("" + j).length();

		// String sql;
		for (int i = 0; i < j;) {
			SqlParamEntity entity = currentBatch.get(i);
			batchReport.append("\n");
			batchReport.append(Utilities.rightJustify(fieldSize, "" + (++i)));
			batchReport.append(":  ");
			batchReport.append(entity.getSql());
		}

		// sql = batchReport.toString();
		long tstart = System.currentTimeMillis();
		int[] updateResults = realStatement.executeBatch();
		long tsEnd = System.currentTimeMillis();
		for (SqlParamEntity entity : currentBatch) {
			action("executeBatch()", entity.getSql(), entity.getNativeSql(), (tsEnd - tstart), entity.getParam());
		}
		currentBatch.clear();
		return updateResults;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#executeQuery(java.lang.String)
	 */
	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		String methodName = "executeQuery(" + sql + ")";
		long tstart = System.currentTimeMillis();
		ResultSet result = realStatement.executeQuery(sql);
		long tsEnd = System.currentTimeMillis();
		action(methodName, sql, sql, (tsEnd - tstart), null);
		return new ResultSetWarpper(this, result);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#executeUpdate(java.lang.String)
	 */
	@Override
	public int executeUpdate(String sql) throws SQLException {
		String methodName = "executeUpdate(" + sql + ")";
		long tstart = System.currentTimeMillis();
		int result = realStatement.executeUpdate(sql);
		long tsEnd = System.currentTimeMillis();
		action(methodName, sql, sql, (tsEnd - tstart), null);
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#executeUpdate(java.lang.String, int)
	 */
	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		String methodName = "executeUpdate(" + sql + "," + autoGeneratedKeys + ")";
		long tstart = System.currentTimeMillis();
		int result = realStatement.executeUpdate(sql, autoGeneratedKeys);
		long tsEnd = System.currentTimeMillis();
		action(methodName, sql, sql, (tsEnd - tstart), null);
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#executeUpdate(java.lang.String, int[])
	 */
	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		String methodName = "executeUpdate(" + sql + "," + columnIndexes + ")";
		long tstart = System.currentTimeMillis();
		int result = realStatement.executeUpdate(sql, columnIndexes);
		long tsEnd = System.currentTimeMillis();
		action(methodName, sql, sql, (tsEnd - tstart), null);
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#executeUpdate(java.lang.String,
	 * java.lang.String[])
	 */
	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		String methodName = "executeUpdate(" + sql + "," + columnNames + ")";
		long tstart = System.currentTimeMillis();
		int result = realStatement.executeUpdate(sql, columnNames);
		long tsEnd = System.currentTimeMillis();
		action(methodName, sql, sql, (tsEnd - tstart), null);
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#getConnection()
	 */
	@Override
	public Connection getConnection() throws SQLException {
		return realStatement.getConnection();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#getFetchDirection()
	 */
	@Override
	public int getFetchDirection() throws SQLException {
		return realStatement.getFetchDirection();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#getFetchSize()
	 */
	@Override
	public int getFetchSize() throws SQLException {
		return realStatement.getFetchSize();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#getGeneratedKeys()
	 */
	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		ResultSet r = realStatement.getGeneratedKeys();
		if (r == null) {
			return r;
		} else {
			return new ResultSetWarpper(this, r);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#getMaxFieldSize()
	 */
	@Override
	public int getMaxFieldSize() throws SQLException {
		return realStatement.getMaxFieldSize();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#getMaxRows()
	 */
	@Override
	public int getMaxRows() throws SQLException {
		return realStatement.getMaxRows();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#getMoreResults()
	 */
	@Override
	public boolean getMoreResults() throws SQLException {
		return realStatement.getMoreResults();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#getMoreResults(int)
	 */
	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return realStatement.getMoreResults(current);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#getQueryTimeout()
	 */
	@Override
	public int getQueryTimeout() throws SQLException {
		return realStatement.getQueryTimeout();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#getResultSet()
	 */
	@Override
	public ResultSet getResultSet() throws SQLException {
		ResultSet r = realStatement.getResultSet();
		if (r == null) {
			return r;
		} else {
			return new ResultSetWarpper(this, r);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#getResultSetConcurrency()
	 */
	@Override
	public int getResultSetConcurrency() throws SQLException {
		return realStatement.getResultSetConcurrency();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#getResultSetHoldability()
	 */
	@Override
	public int getResultSetHoldability() throws SQLException {
		return realStatement.getResultSetHoldability();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#getResultSetType()
	 */
	@Override
	public int getResultSetType() throws SQLException {
		return realStatement.getResultSetType();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#getUpdateCount()
	 */
	@Override
	public int getUpdateCount() throws SQLException {
		return realStatement.getUpdateCount();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#getWarnings()
	 */
	@Override
	public SQLWarning getWarnings() throws SQLException {
		return realStatement.getWarnings();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#isClosed()
	 */
	@Override
	public boolean isClosed() throws SQLException {
		return realStatement.isClosed();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#isPoolable()
	 */
	@Override
	public boolean isPoolable() throws SQLException {
		return realStatement.isPoolable();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#setCursorName(java.lang.String)
	 */
	@Override
	public void setCursorName(String name) throws SQLException {
		realStatement.setCursorName(name);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#setEscapeProcessing(boolean)
	 */
	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		realStatement.setEscapeProcessing(enable);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#setFetchDirection(int)
	 */
	@Override
	public void setFetchDirection(int direction) throws SQLException {
		realStatement.setFetchDirection(direction);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#setFetchSize(int)
	 */
	@Override
	public void setFetchSize(int rows) throws SQLException {
		realStatement.setFetchSize(rows);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#setMaxFieldSize(int)
	 */
	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		realStatement.setMaxFieldSize(max);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#setMaxRows(int)
	 */
	@Override
	public void setMaxRows(int max) throws SQLException {
		realStatement.setMaxRows(max);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#setPoolable(boolean)
	 */
	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		realStatement.setPoolable(poolable);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Statement#setQueryTimeout(int)
	 */
	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		realStatement.setQueryTimeout(seconds);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Wrapper#isWrapperFor(java.lang.Class)
	 */
	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return realStatement.isWrapperFor(iface);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.sql.Wrapper#unwrap(java.lang.Class)
	 */
	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return realStatement.unwrap(iface);
	}

	/**
	 * Process sql.
	 * 
	 * @param tempSql
	 *            the temp sql
	 * @return the string
	 */
	protected String processSql(String tempSql) {
		String sql = tempSql;
		if (sql == null) {
			return null;
		}
		sql = sql.trim();
		StringBuffer output = new StringBuffer();
		output.append(sql);
		output.append(";");
		if (settings.getAsBoolean("formatting", true)) {
			return new BasicSqlFormatter().format(output.toString());
		} else {
			return output.toString();
		}
	}

	/**
	 * Action.
	 * 
	 * @param methodName
	 *            the method name
	 * @param sql
	 *            the sql
	 * @param nativeSql
	 *            the native sql
	 * @param l
	 *            the l
	 * @param argValue
	 *            the arg value
	 */
	protected void action(String methodName, String sql, String nativeSql, long l, Object[] argValue) {
		try {
			LogSqlEntity entity = new LogSqlEntity();
			entity.setSql(processSql(sql));
			List<SqlTypeEnum> enums = getSqlTypeEnum();
			SqlTypeEnum sqlTypeEnum = findSqlTyp(entity);
			if (enums.contains(sqlTypeEnum)) {
				entity.setSqlTypeEnum(sqlTypeEnum);
				boolean b = checkTableName(entity);//check table name
				if (b) {
					WaySql waySql = getWaySql();
					entity.setId(NonceUtils.randomLong());
					entity.setTime(new Long(l));
					entity.setCreateDate(DateUtils.getCurrentDateTime());
					entity.setMethodName(methodName);
					entity.setStackTraceElement(getStackTraceElement());
					ServerInfo serverInfo = getServerInfo();
					entity.setServerIp(serverInfo.bulidServerIp());
					entity.setServerPort(serverInfo.bulidServerPort());
					entity.setSqlTypeEnum(sqlTypeEnum);
					/**
					 * 扩展信息 放入本地的SQL及本地的SQL参数
					 */
					entity.setNativeSql(nativeSql);
					entity.setParam(argValue);
					waySql.action(entity);

				}
			}
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}
	}

	/**
	 * Gets the server info.
	 *
	 * @return the server info
	 */
	private ServerInfo getServerInfo() {
		Class<?> waySqlClass = settings.getAsClass("serverInfo", DefaultSystemEvnServerInfo.class);
		try {
			return (ServerInfo) waySqlClass.newInstance();
		} catch (Exception e) {
			return new DefaultSystemEvnServerInfo();
		}
	}

	/**
	 * Gets the way sql.
	 *
	 * @return the way sql
	 */
	private WaySql getWaySql() {
		Class<?> class1 = settings.getAsClass("waySql", LogWaySql.class);
		try {
			Constructor<?> constructor = class1.getDeclaredConstructor(Settings.class);
			return (WaySql) constructor.newInstance(settings);
		} catch (Exception e) {
			return new LogWaySql(settings);
		}
	}

	/**
	 * Gets the sql type enum.
	 *
	 * @return the sql type enum
	 */
	private List<SqlTypeEnum> getSqlTypeEnum() {
		List<SqlTypeEnum> enums = Lists.newArrayList();
		String listenerSqlType = settings.get("listenerSqlType", "DELETE");
		if (StringUtils.isNotBlank(listenerSqlType)) {
			logger.info("Listener Sql Type to[{}]", listenerSqlType);
			String[] listenerSqlTypes = listenerSqlType.split(",");
			for (String string : listenerSqlTypes) {
				try {
					enums.add(Enum.valueOf(SqlTypeEnum.class, string.trim()));
				} catch (Exception e) {
					continue;
				}
			}
		}
		return enums;
	}

	private boolean checkTableName(LogSqlEntity entity) {
		SqlTypeEnum sqlTypeEnum = entity.getSqlTypeEnum();
		List<String> tableNames = getNoInterceptTableName();
		for (String tableName : tableNames) {
			int pos = 0;
			if (SqlTypeEnum.SELECT.equals(sqlTypeEnum) || SqlTypeEnum.DELETE.equals(sqlTypeEnum)) {
				pos = indexOfByRegex(entity.getSql().toLowerCase(), "\\sfrom\\s*" + tableName.toLowerCase());
			} else if (SqlTypeEnum.INSERT.equals(sqlTypeEnum)) {
				pos = indexOfByRegex(entity.getSql().toLowerCase(), "\\s*into\\s*" + tableName.toLowerCase());
			} else if (SqlTypeEnum.UPDATE.equals(sqlTypeEnum)) {
				pos = indexOfByRegex(entity.getSql().toLowerCase(), "\\s*update\\s*" + tableName.toLowerCase());
			} else if (SqlTypeEnum.CALL.equals(sqlTypeEnum) || SqlTypeEnum.NULL.equals(sqlTypeEnum)) {
				pos = indexOfByRegex(entity.getSql().toLowerCase(), "\\s*" + tableName.toLowerCase() + "\\s*");
			} else if (SqlTypeEnum.CREATE.equals(sqlTypeEnum)) {
				pos = indexOfByRegex(entity.getSql().toLowerCase(), "\\screate table " + tableName.toLowerCase()
						+ "\\s*");
			} else if (SqlTypeEnum.DROP.equals(sqlTypeEnum)) {
				pos = indexOfByRegex(entity.getSql().toLowerCase(), "\\sdrop table " + tableName.toLowerCase() + "\\s*");
			}
			if (pos != -1) {
				return false;
			}
		}
		return true;
	}

	static public int indexOfByRegex(String input, String regex) {
		Pattern p = Pattern.compile(regex);
		Matcher m = p.matcher(input);
		if (m.find()) {
			return m.start();
		}
		return -1;
	}

	private List<String> getNoInterceptTableName() {
		String noInterceptTableName = settings.get("noInterceptTableName");
		if (org.apache.commons.lang3.StringUtils.isBlank(noInterceptTableName))
			return Lists.newArrayList();
		return Arrays.asList(StringUtils.split(noInterceptTableName, ","));
	}

	/**
	 * Find sql typ.
	 *
	 * @param entity the entity
	 * @return the sql type enum
	 */
	private SqlTypeEnum findSqlTyp(LogSqlEntity entity) {
		String sql = entity.getSql();
		if (StringUtils.isBlank(sql))
			return SqlTypeEnum.NULL;
		sql = sql.trim();
		if ((sql.startsWith("{") && sql.endsWith("}")) || sql.startsWith("{") || sql.endsWith("}")
				|| sql.indexOf("{") != -1 || sql.indexOf("}") != -1)
			return SqlTypeEnum.CALL;
		if (sql.toLowerCase().startsWith("with")) {
			return SqlTypeEnum.SELECT;
		}
		if (sql.length() < 6)
			return SqlTypeEnum.NULL;
		String susql = sql.substring(0, 6).toUpperCase();
		try {
			return Enum.valueOf(SqlTypeEnum.class, susql);
		} catch (Exception e) {
			susql = sql.substring(0, 4).toUpperCase();
			try {
				return Enum.valueOf(SqlTypeEnum.class, susql);
			} catch (Exception e2) {
				return SqlTypeEnum.NULL;
			}
		}
	}

	/**
	 * From byte array.
	 * 
	 * @param bytes
	 *            the bytes
	 * @return the object
	 * @throws IOException
	 *             Signals that an I/O exception has occurred.
	 * @throws ClassNotFoundException
	 *             the class not found exception
	 */
	Object fromByteArray(byte[] bytes) throws IOException, ClassNotFoundException {
		ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(bytes));
		return in.readObject();
	}

	/**
	 * Gets the stack trace element.
	 * 
	 * @return the stack trace element
	 */
	protected String getStackTraceElement() {
		if (!settings.getAsBoolean("printStackTrace", true)) {
			return null;
		}
		StackTraceElement[] trace = Thread.currentThread().getStackTrace();
		StringBuffer buffer = new StringBuffer();
		buffer.append("\n");
		for (StackTraceElement stackTraceElement : trace) {
			buffer.append("\tat " + stackTraceElement + " \n");
		}
		return buffer.toString();
	}
}
